---
title: "Ranking the `{tidyverse}` packages for bioinformatics analysis."
subtitle: "from MY perspective"
author: "Marcel Ferreira (@marceelrf)"
format: 
  revealjs:
    incremental: true   
---

## Bioinformatics

::: columns
::: {.column width="50%"}
-   Genetics and Genomics;

-   **Collect**, **store**, **analyze** and, **disseminate** biological information;

-   Transcriptomic and Proteomic data;

-   Differential expression and enrichment analysis.
:::

::: {.column width="50%"}
[![](images/Bioconductor.png){width="950"}](https://www.bioconductor.org/)
:::
:::

## The `{tidyverse}`

-   [Hadley Wickham](https://hadley.nz/);

-   Designed for data science;

-   Each package has a common design philosophy, grammar, and data structures.

## The `{tidyverse}`

[![tidyverse packages - Posit](images/tidyverse-packages.png){fig-align="center"}](https://education.rstudio.com/blog/2020/07/teaching-the-tidyverse-in-2020-part-1-getting-started/)

## The `{tidyverse}`

![](images/loadTidyverse.png)

## 9. `{lubridate}`

::: columns
::: {.column width="50%"}
-   New member;

-   Designed to handle `dates` and `times` data;

-   These formats are not widely used in bioinformatics analysis;

-   `factor`.
:::

::: {.column width="50%"}
[![](images/lubridate.png){width="950"}](https://lubridate.tidyverse.org/)
:::
:::

## 8. `{forcats}`

::: columns
::: {.column width="50%"}
[![](images/forcats.png){width="950"}](https://forcats.tidyverse.org/)
:::

::: {.column width="50%"}
-   Categorical variables;

-   All functions starts with `fct_`;

-   Although extremely useful, I have never used it myself in my analysis pipelines.
:::
:::

## 7. `{readr}`

::: columns
::: {.column width="50%"}
-   Data `import` and `export`;

-   `CSV`, `TSV`, `TXT`, and other delimited files;

-   The R-base import functions are also effective and often run internally in `bioconductor` packages.
:::

::: {.column width="50%"}
[![](images/readr.png){width="950"}](https://readr.tidyverse.org)
:::
:::

## 6. `{tibble}`

::: columns
::: {.column width="50%"}
[![](images/tibble.png){width="950"}](https://tibble.tidyverse.org)
:::

::: {.column width="50%"}
-   Modern `data.frame`;

-   It's simples to convert `data.frame`, `list` and `vectors` to `tibble` format;

-   `tibble()`;

-   `rowid_to_column()`, `rownames_to_column()`, `column_to_rownames()`, `enframe()` and `deframe()`.
:::
:::

## 5. `{purrr}`

::: columns
::: {.column width="50%"}
-   Enhances R\'s functional programming toolkit;

-   `Lists` and `vectors`;

-   `map` family;

-   `flatten` and `reduce`;

-   Combined with list-columns produce one of the most powerful analysis pipelines in R.
:::

::: {.column width="50%"}
[![](images/purrr.png){width="950"}](https://purrr.tidyverse.org)
:::
:::

## 4. `{stringr}`

::: columns
::: {.column width="50%"}
[![](images/stringr.png){width="950"}](https://stringr.tidyverse.org)
:::

::: {.column width="50%"}
-   The package to deal with `strings`;

-   DNA, RNA and Proteins are **Biological strings**;

-   All functions starts with `str_`;

-   Regular expression (`regex`);

-   
:::
:::

## 3. `{tidyr}`

::: columns
::: {.column width="50%"}
Left column
:::

::: {.column width="50%"}
[![](images/tidyr.png){width="950"}](https://tidyr.tidyverse.org)
:::
:::

## 2. `{ggplot2}`

::: columns
::: {.column width="50%"}
[![](images/ggplot2.png){width="950"}](https://ggplot2.tidyverse.org)
:::

::: {.column width="50%"}
Right column
:::
:::

## 1. `{dplyr}`

::: columns
::: {.column width="50%"}
Left column
:::

::: {.column width="50%"}
[![](images/dplyr.png){width="950"}](https://dplyr.tidyverse.org)
:::
:::
